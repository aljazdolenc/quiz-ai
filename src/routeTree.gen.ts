/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import {Route as rootRoute} from './routes/__root'
import {Route as QuizImport} from './routes/quiz'
import {Route as QuizQuizIdImport} from './routes/quiz_.$quizId'
import {Route as QuizQuizIdResultsImport} from './routes/quiz_.$quizId_.results'

// Create/Update Routes

const QuizRoute = QuizImport.update({
  id: '/quiz',
  path: '/quiz',
  getParentRoute: () => rootRoute,
} as any)

const QuizQuizIdRoute = QuizQuizIdImport.update({
  id: '/quiz_/$quizId',
  path: '/quiz/$quizId',
  getParentRoute: () => rootRoute,
} as any)

const QuizQuizIdResultsRoute = QuizQuizIdResultsImport.update({
  id: '/quiz_/$quizId_/results',
  path: '/quiz/$quizId/results',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/quiz': {
      id: '/quiz'
      path: '/quiz'
      fullPath: '/quiz'
      preLoaderRoute: typeof QuizImport
      parentRoute: typeof rootRoute
    }
    '/quiz_/$quizId': {
      id: '/quiz_/$quizId'
      path: '/quiz/$quizId'
      fullPath: '/quiz/$quizId'
      preLoaderRoute: typeof QuizQuizIdImport
      parentRoute: typeof rootRoute
    }
    '/quiz_/$quizId_/results': {
      id: '/quiz_/$quizId_/results'
      path: '/quiz/$quizId/results'
      fullPath: '/quiz/$quizId/results'
      preLoaderRoute: typeof QuizQuizIdResultsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/quiz': typeof QuizRoute
  '/quiz/$quizId': typeof QuizQuizIdRoute
  '/quiz/$quizId/results': typeof QuizQuizIdResultsRoute
}

export interface FileRoutesByTo {
  '/quiz': typeof QuizRoute
  '/quiz/$quizId': typeof QuizQuizIdRoute
  '/quiz/$quizId/results': typeof QuizQuizIdResultsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/quiz': typeof QuizRoute
  '/quiz_/$quizId': typeof QuizQuizIdRoute
  '/quiz_/$quizId_/results': typeof QuizQuizIdResultsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/quiz' | '/quiz/$quizId' | '/quiz/$quizId/results'
  fileRoutesByTo: FileRoutesByTo
  to: '/quiz' | '/quiz/$quizId' | '/quiz/$quizId/results'
  id: '__root__' | '/quiz' | '/quiz_/$quizId' | '/quiz_/$quizId_/results'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  QuizRoute: typeof QuizRoute
  QuizQuizIdRoute: typeof QuizQuizIdRoute
  QuizQuizIdResultsRoute: typeof QuizQuizIdResultsRoute
}

const rootRouteChildren: RootRouteChildren = {
  QuizRoute: QuizRoute,
  QuizQuizIdRoute: QuizQuizIdRoute,
  QuizQuizIdResultsRoute: QuizQuizIdResultsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/quiz",
        "/quiz_/$quizId",
        "/quiz_/$quizId_/results"
      ]
    },
    "/quiz": {
      "filePath": "quiz.tsx"
    },
    "/quiz_/$quizId": {
      "filePath": "quiz_.$quizId.tsx"
    },
    "/quiz_/$quizId_/results": {
      "filePath": "quiz_.$quizId_.results.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
